// Generated by @wagmi/cli@0.1.14 on 03/04/2023 at 16:02:38
import {
  useContract,
  UseContractConfig,
  useContractRead,
  UseContractReadConfig,
  useContractWrite,
  UseContractWriteConfig,
  usePrepareContractWrite,
  UsePrepareContractWriteConfig,
  useContractEvent,
  UseContractEventConfig,
} from 'wagmi'
import {
  ReadContractResult,
  WriteContractMode,
  PrepareWriteContractResult,
} from 'wagmi/actions'

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Storage
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const storageABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: '_value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'ValueStored',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'retrieve',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'num', internalType: 'uint256', type: 'uint256' }],
    name: 'store',
    outputs: [],
  },
] as const

export const storageAddress =
  '0xDc64a140Aa3E981100a9becA4E685f962f0cF6C9' as const

export const storageConfig = {
  address: storageAddress,
  abi: storageABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ArkaMaster
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const arkaMasterABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [{ name: '_arkaToken', internalType: 'address', type: 'address' }],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'OwnershipTransferred',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'arkaToken',
    outputs: [
      { name: '', internalType: 'contract ArkaERC20', type: 'address' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'idResource', internalType: 'uint256', type: 'uint256' },
      {
        name: 'interaction',
        internalType: 'enum ArkaMaster.InteractType',
        type: 'uint8',
      },
    ],
    name: 'interact',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'address', type: 'address' },
    ],
    name: 'interactions',
    outputs: [
      { name: '', internalType: 'enum ArkaMaster.InteractType', type: 'uint8' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: '_description', internalType: 'string', type: 'string' },
      { name: '_url', internalType: 'string', type: 'string' },
    ],
    name: 'proposeResource',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'resources',
    outputs: [
      { name: 'description', internalType: 'string', type: 'string' },
      { name: 'url', internalType: 'string', type: 'string' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
] as const

export const arkaMasterAddress =
  '0x0724F18B2aA7D6413D3fDcF6c0c27458a8170Dd9' as const

export const arkaMasterConfig = {
  address: arkaMasterAddress,
  abi: arkaMasterABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// React
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link storageABI}__.
 */
export function useStorage(
  config: Omit<UseContractConfig, 'abi' | 'address'> = {} as any,
) {
  return useContract({ abi: storageABI, address: storageAddress, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link storageABI}__.
 */
export function useStorageRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof storageABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof storageABI, TFunctionName, TSelectData>,
    'abi' | 'address'
  > = {} as any,
) {
  return useContractRead({
    abi: storageABI,
    address: storageAddress,
    ...config,
  } as UseContractReadConfig<typeof storageABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link storageABI}__ and `functionName` set to `"retrieve"`.
 */
export function useStorageRetrieve<
  TSelectData = ReadContractResult<typeof storageABI, 'retrieve'>,
>(
  config: Omit<
    UseContractReadConfig<typeof storageABI, 'retrieve', TSelectData>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: storageABI,
    address: storageAddress,
    functionName: 'retrieve',
    ...config,
  } as UseContractReadConfig<typeof storageABI, 'retrieve', TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link storageABI}__.
 */
export function useStorageWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof storageABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof storageABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof storageABI, TFunctionName>({
    abi: storageABI,
    address: storageAddress,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link storageABI}__ and `functionName` set to `"store"`.
 */
export function useStorageStore<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof storageABI, 'store'>['abi'],
        'store'
      > & { functionName?: 'store' }
    : UseContractWriteConfig<TMode, typeof storageABI, 'store'> & {
        abi?: never
        functionName?: 'store'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof storageABI, 'store'>({
    abi: storageABI,
    address: storageAddress,
    functionName: 'store',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link storageABI}__.
 */
export function usePrepareStorageWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof storageABI, TFunctionName>,
    'abi' | 'address'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: storageABI,
    address: storageAddress,
    ...config,
  } as UsePrepareContractWriteConfig<typeof storageABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link storageABI}__ and `functionName` set to `"store"`.
 */
export function usePrepareStorageStore(
  config: Omit<
    UsePrepareContractWriteConfig<typeof storageABI, 'store'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: storageABI,
    address: storageAddress,
    functionName: 'store',
    ...config,
  } as UsePrepareContractWriteConfig<typeof storageABI, 'store'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link storageABI}__.
 */
export function useStorageEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof storageABI, TEventName>,
    'abi' | 'address'
  > = {} as any,
) {
  return useContractEvent({
    abi: storageABI,
    address: storageAddress,
    ...config,
  } as UseContractEventConfig<typeof storageABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link storageABI}__ and `eventName` set to `"ValueStored"`.
 */
export function useStorageValueStoredEvent(
  config: Omit<
    UseContractEventConfig<typeof storageABI, 'ValueStored'>,
    'abi' | 'address' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: storageABI,
    address: storageAddress,
    eventName: 'ValueStored',
    ...config,
  } as UseContractEventConfig<typeof storageABI, 'ValueStored'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link arkaMasterABI}__.
 */
export function useArkaMaster(
  config: Omit<UseContractConfig, 'abi' | 'address'> = {} as any,
) {
  return useContract({
    abi: arkaMasterABI,
    address: arkaMasterAddress,
    ...config,
  })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link arkaMasterABI}__.
 */
export function useArkaMasterRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof arkaMasterABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof arkaMasterABI, TFunctionName, TSelectData>,
    'abi' | 'address'
  > = {} as any,
) {
  return useContractRead({
    abi: arkaMasterABI,
    address: arkaMasterAddress,
    ...config,
  } as UseContractReadConfig<typeof arkaMasterABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link arkaMasterABI}__ and `functionName` set to `"arkaToken"`.
 */
export function useArkaMasterArkaToken<
  TSelectData = ReadContractResult<typeof arkaMasterABI, 'arkaToken'>,
>(
  config: Omit<
    UseContractReadConfig<typeof arkaMasterABI, 'arkaToken', TSelectData>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: arkaMasterABI,
    address: arkaMasterAddress,
    functionName: 'arkaToken',
    ...config,
  } as UseContractReadConfig<typeof arkaMasterABI, 'arkaToken', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link arkaMasterABI}__ and `functionName` set to `"interactions"`.
 */
export function useArkaMasterInteractions<
  TSelectData = ReadContractResult<typeof arkaMasterABI, 'interactions'>,
>(
  config: Omit<
    UseContractReadConfig<typeof arkaMasterABI, 'interactions', TSelectData>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: arkaMasterABI,
    address: arkaMasterAddress,
    functionName: 'interactions',
    ...config,
  } as UseContractReadConfig<typeof arkaMasterABI, 'interactions', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link arkaMasterABI}__ and `functionName` set to `"owner"`.
 */
export function useArkaMasterOwner<
  TSelectData = ReadContractResult<typeof arkaMasterABI, 'owner'>,
>(
  config: Omit<
    UseContractReadConfig<typeof arkaMasterABI, 'owner', TSelectData>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: arkaMasterABI,
    address: arkaMasterAddress,
    functionName: 'owner',
    ...config,
  } as UseContractReadConfig<typeof arkaMasterABI, 'owner', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link arkaMasterABI}__ and `functionName` set to `"resources"`.
 */
export function useArkaMasterResources<
  TSelectData = ReadContractResult<typeof arkaMasterABI, 'resources'>,
>(
  config: Omit<
    UseContractReadConfig<typeof arkaMasterABI, 'resources', TSelectData>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: arkaMasterABI,
    address: arkaMasterAddress,
    functionName: 'resources',
    ...config,
  } as UseContractReadConfig<typeof arkaMasterABI, 'resources', TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link arkaMasterABI}__.
 */
export function useArkaMasterWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof arkaMasterABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof arkaMasterABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof arkaMasterABI, TFunctionName>({
    abi: arkaMasterABI,
    address: arkaMasterAddress,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link arkaMasterABI}__ and `functionName` set to `"interact"`.
 */
export function useArkaMasterInteract<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof arkaMasterABI, 'interact'>['abi'],
        'interact'
      > & { functionName?: 'interact' }
    : UseContractWriteConfig<TMode, typeof arkaMasterABI, 'interact'> & {
        abi?: never
        functionName?: 'interact'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof arkaMasterABI, 'interact'>({
    abi: arkaMasterABI,
    address: arkaMasterAddress,
    functionName: 'interact',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link arkaMasterABI}__ and `functionName` set to `"proposeResource"`.
 */
export function useArkaMasterProposeResource<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof arkaMasterABI,
          'proposeResource'
        >['abi'],
        'proposeResource'
      > & { functionName?: 'proposeResource' }
    : UseContractWriteConfig<TMode, typeof arkaMasterABI, 'proposeResource'> & {
        abi?: never
        functionName?: 'proposeResource'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof arkaMasterABI, 'proposeResource'>({
    abi: arkaMasterABI,
    address: arkaMasterAddress,
    functionName: 'proposeResource',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link arkaMasterABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useArkaMasterRenounceOwnership<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof arkaMasterABI,
          'renounceOwnership'
        >['abi'],
        'renounceOwnership'
      > & { functionName?: 'renounceOwnership' }
    : UseContractWriteConfig<
        TMode,
        typeof arkaMasterABI,
        'renounceOwnership'
      > & {
        abi?: never
        functionName?: 'renounceOwnership'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof arkaMasterABI, 'renounceOwnership'>({
    abi: arkaMasterABI,
    address: arkaMasterAddress,
    functionName: 'renounceOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link arkaMasterABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useArkaMasterTransferOwnership<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof arkaMasterABI,
          'transferOwnership'
        >['abi'],
        'transferOwnership'
      > & { functionName?: 'transferOwnership' }
    : UseContractWriteConfig<
        TMode,
        typeof arkaMasterABI,
        'transferOwnership'
      > & {
        abi?: never
        functionName?: 'transferOwnership'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof arkaMasterABI, 'transferOwnership'>({
    abi: arkaMasterABI,
    address: arkaMasterAddress,
    functionName: 'transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link arkaMasterABI}__.
 */
export function usePrepareArkaMasterWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof arkaMasterABI, TFunctionName>,
    'abi' | 'address'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: arkaMasterABI,
    address: arkaMasterAddress,
    ...config,
  } as UsePrepareContractWriteConfig<typeof arkaMasterABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link arkaMasterABI}__ and `functionName` set to `"interact"`.
 */
export function usePrepareArkaMasterInteract(
  config: Omit<
    UsePrepareContractWriteConfig<typeof arkaMasterABI, 'interact'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: arkaMasterABI,
    address: arkaMasterAddress,
    functionName: 'interact',
    ...config,
  } as UsePrepareContractWriteConfig<typeof arkaMasterABI, 'interact'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link arkaMasterABI}__ and `functionName` set to `"proposeResource"`.
 */
export function usePrepareArkaMasterProposeResource(
  config: Omit<
    UsePrepareContractWriteConfig<typeof arkaMasterABI, 'proposeResource'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: arkaMasterABI,
    address: arkaMasterAddress,
    functionName: 'proposeResource',
    ...config,
  } as UsePrepareContractWriteConfig<typeof arkaMasterABI, 'proposeResource'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link arkaMasterABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareArkaMasterRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof arkaMasterABI, 'renounceOwnership'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: arkaMasterABI,
    address: arkaMasterAddress,
    functionName: 'renounceOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof arkaMasterABI, 'renounceOwnership'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link arkaMasterABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareArkaMasterTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof arkaMasterABI, 'transferOwnership'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: arkaMasterABI,
    address: arkaMasterAddress,
    functionName: 'transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof arkaMasterABI, 'transferOwnership'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link arkaMasterABI}__.
 */
export function useArkaMasterEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof arkaMasterABI, TEventName>,
    'abi' | 'address'
  > = {} as any,
) {
  return useContractEvent({
    abi: arkaMasterABI,
    address: arkaMasterAddress,
    ...config,
  } as UseContractEventConfig<typeof arkaMasterABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link arkaMasterABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useArkaMasterOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof arkaMasterABI, 'OwnershipTransferred'>,
    'abi' | 'address' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: arkaMasterABI,
    address: arkaMasterAddress,
    eventName: 'OwnershipTransferred',
    ...config,
  } as UseContractEventConfig<typeof arkaMasterABI, 'OwnershipTransferred'>)
}
