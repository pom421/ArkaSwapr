// Generated by @wagmi/cli@0.1.14 on 29/03/2023 at 11:46:46
import {
  useContract,
  UseContractConfig, useContractEvent,
  UseContractEventConfig, useContractRead,
  UseContractReadConfig,
  useContractWrite,
  UseContractWriteConfig,
  usePrepareContractWrite,
  UsePrepareContractWriteConfig
} from "wagmi"
import { PrepareWriteContractResult, ReadContractResult, WriteContractMode } from "wagmi/actions"

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Storage
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const storageABI = [
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "_value",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "ValueStored",
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "retrieve",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "num", internalType: "uint256", type: "uint256" }],
    name: "store",
    outputs: [],
  },
] as const

export const storageAddress = "0xDc64a140Aa3E981100a9becA4E685f962f0cF6C9" as const

export const storageConfig = {
  address: storageAddress,
  abi: storageABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// React
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link storageABI}__.
 */
export function useStorage(config: Omit<UseContractConfig, "abi" | "address"> = {} as any) {
  return useContract({ abi: storageABI, address: storageAddress, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link storageABI}__.
 */
export function useStorageRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof storageABI, TFunctionName>,
>(config: Omit<UseContractReadConfig<typeof storageABI, TFunctionName, TSelectData>, "abi" | "address"> = {} as any) {
  return useContractRead({
    abi: storageABI,
    address: storageAddress,
    ...config,
  } as UseContractReadConfig<typeof storageABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link storageABI}__ and `functionName` set to `"retrieve"`.
 */
export function useStorageRetrieve<TSelectData = ReadContractResult<typeof storageABI, "retrieve">>(
  config: Omit<
    UseContractReadConfig<typeof storageABI, "retrieve", TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: storageABI,
    address: storageAddress,
    functionName: "retrieve",
    ...config,
  } as UseContractReadConfig<typeof storageABI, "retrieve", TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link storageABI}__.
 */
export function useStorageWrite<TMode extends WriteContractMode, TFunctionName extends string>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof storageABI, string>["abi"], TFunctionName>
    : UseContractWriteConfig<TMode, typeof storageABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof storageABI, TFunctionName>({
    abi: storageABI,
    address: storageAddress,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link storageABI}__ and `functionName` set to `"store"`.
 */
export function useStorageStore<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof storageABI, "store">["abi"], "store"> & {
        functionName?: "store"
      }
    : UseContractWriteConfig<TMode, typeof storageABI, "store"> & {
        abi?: never
        functionName?: "store"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof storageABI, "store">({
    abi: storageABI,
    address: storageAddress,
    functionName: "store",
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link storageABI}__.
 */
export function usePrepareStorageWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof storageABI, TFunctionName>, "abi" | "address"> = {} as any,
) {
  return usePrepareContractWrite({
    abi: storageABI,
    address: storageAddress,
    ...config,
  } as UsePrepareContractWriteConfig<typeof storageABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link storageABI}__ and `functionName` set to `"store"`.
 */
export function usePrepareStorageStore(
  config: Omit<
    UsePrepareContractWriteConfig<typeof storageABI, "store">,
    "abi" | "address" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: storageABI,
    address: storageAddress,
    functionName: "store",
    ...config,
  } as UsePrepareContractWriteConfig<typeof storageABI, "store">)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link storageABI}__.
 */
export function useStorageEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof storageABI, TEventName>, "abi" | "address"> = {} as any,
) {
  return useContractEvent({
    abi: storageABI,
    address: storageAddress,
    ...config,
  } as UseContractEventConfig<typeof storageABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link storageABI}__ and `eventName` set to `"ValueStored"`.
 */
export function useStorageValueStoredEvent(
  config: Omit<UseContractEventConfig<typeof storageABI, "ValueStored">, "abi" | "address" | "eventName"> = {} as any,
) {
  return useContractEvent({
    abi: storageABI,
    address: storageAddress,
    eventName: "ValueStored",
    ...config,
  } as UseContractEventConfig<typeof storageABI, "ValueStored">)
}
