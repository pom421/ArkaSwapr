// Generated by @wagmi/cli@0.1.14 on 07/04/2023 at 18:42:57
import {
  useContract,
  UseContractConfig,
  useContractRead,
  UseContractReadConfig,
  useContractWrite,
  UseContractWriteConfig,
  usePrepareContractWrite,
  UsePrepareContractWriteConfig,
  useContractEvent,
  UseContractEventConfig,
} from 'wagmi'
import {
  ReadContractResult,
  WriteContractMode,
  PrepareWriteContractResult,
} from 'wagmi/actions'

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Storage
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const storageABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: '_value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'ValueStored',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'retrieve',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'num', internalType: 'uint256', type: 'uint256' }],
    name: 'store',
    outputs: [],
  },
] as const

export const storageAddress =
  '0xDc64a140Aa3E981100a9becA4E685f962f0cF6C9' as const

export const storageConfig = {
  address: storageAddress,
  abi: storageABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ArkaMaster
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const arkaMasterABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      { name: '_arkaToken', internalType: 'address', type: 'address' },
      { name: '_priceFeedEthUsd', internalType: 'address', type: 'address' },
    ],
  },
  { type: 'event', anonymous: false, inputs: [], name: 'EndStake' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'idResource',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'user',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'interaction',
        internalType: 'enum ArkaMaster.InteractType',
        type: 'uint8',
        indexed: false,
      },
    ],
    name: 'Interaction',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'amountReward',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'NewStake',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'OwnershipTransferred',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'description',
        internalType: 'string',
        type: 'string',
        indexed: false,
      },
      { name: 'url', internalType: 'string', type: 'string', indexed: false },
      {
        name: 'endDate',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'ResourceProposed',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'arkaToken',
    outputs: [
      { name: '', internalType: 'contract ArkaERC20', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'currentStake',
    outputs: [
      { name: '', internalType: 'contract ArkaStaking', type: 'address' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'endCurrentStake',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_idResource', internalType: 'uint256', type: 'uint256' },
      { name: '_user', internalType: 'address', type: 'address' },
    ],
    name: 'getInteraction',
    outputs: [
      { name: '', internalType: 'enum ArkaMaster.InteractType', type: 'uint8' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getPriceForProposalInWei',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_idResource', internalType: 'uint256', type: 'uint256' }],
    name: 'getResource',
    outputs: [
      {
        name: '',
        internalType: 'struct ArkaMaster.Resource',
        type: 'tuple',
        components: [
          { name: 'description', internalType: 'string', type: 'string' },
          { name: 'url', internalType: 'string', type: 'string' },
          { name: 'endDate', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getResourceLength',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_idResource', internalType: 'uint256', type: 'uint256' },
      {
        name: '_interaction',
        internalType: 'enum ArkaMaster.InteractType',
        type: 'uint8',
      },
    ],
    name: 'interact',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'address', type: 'address' },
    ],
    name: 'interactions',
    outputs: [
      { name: '', internalType: 'enum ArkaMaster.InteractType', type: 'uint8' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'priceFeedEthUsd',
    outputs: [
      { name: '', internalType: 'contract ChainlinkEthUsd', type: 'address' },
    ],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: '_description', internalType: 'string', type: 'string' },
      { name: '_url', internalType: 'string', type: 'string' },
    ],
    name: 'proposeResource',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'resources',
    outputs: [
      { name: 'description', internalType: 'string', type: 'string' },
      { name: 'url', internalType: 'string', type: 'string' },
      { name: 'endDate', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_amountReward', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'startNewStake',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
] as const

export const arkaMasterAddress =
  '0x89372b32b8AF3F1272e2efb3088616318D2834cA' as const

export const arkaMasterConfig = {
  address: arkaMasterAddress,
  abi: arkaMasterABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ArkaStaking
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const arkaStakingABI = [
  {
    stateMutability: 'payable',
    type: 'constructor',
    inputs: [
      { name: '_stakingToken', internalType: 'address', type: 'address' },
    ],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'user', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Deposit',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'OwnershipTransferred',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'user', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'RewardClaimed',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [],
    name: 'TransferUnclaimedReward',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'user', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'Withdraw',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'amountReward',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'arkaToken',
    outputs: [{ name: '', internalType: 'contract IERC20', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_account', internalType: 'address', type: 'address' }],
    name: 'calculateRewardForAccount',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'claimReward',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_amount', internalType: 'uint256', type: 'uint256' }],
    name: 'deposit',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'duration',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'finishAt',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'rewardPerToken',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'rewardRate',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'rewards',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'stakeBalanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'transferUnclaimedReward',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'updatedAt',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'userRewardPerTokenPaid',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'withdraw',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ArkaERC20
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const arkaErc20ABI = [
  { stateMutability: 'nonpayable', type: 'constructor', inputs: [] },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'spender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'OwnershipTransferred',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'arkaMaster',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'subtractedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'decreaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'addedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'increaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_account', internalType: 'address', type: 'address' },
      { name: '_amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'mintArka',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_arkaMaster', internalType: 'address', type: 'address' }],
    name: 'setArkaMaster',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'recipient', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'sender', internalType: 'address', type: 'address' },
      { name: 'recipient', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
] as const

export const arkaErc20Address =
  '0x3de00f44ce68FC56DB0e0E33aD4015C6e78eCB39' as const

export const arkaErc20Config = {
  address: arkaErc20Address,
  abi: arkaErc20ABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ChainlinkEthUsd
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const chainlinkEthUsdABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      { name: '_priceFeedEthUsd', internalType: 'address', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getLatestPrice',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
] as const

export const chainlinkEthUsdAddress =
  '0x04F339eC4D75Cf2833069e6e61b60eF56461CD7C' as const

export const chainlinkEthUsdConfig = {
  address: chainlinkEthUsdAddress,
  abi: chainlinkEthUsdABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// React
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link storageABI}__.
 */
export function useStorage(
  config: Omit<UseContractConfig, 'abi' | 'address'> = {} as any,
) {
  return useContract({ abi: storageABI, address: storageAddress, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link storageABI}__.
 */
export function useStorageRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof storageABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof storageABI, TFunctionName, TSelectData>,
    'abi' | 'address'
  > = {} as any,
) {
  return useContractRead({
    abi: storageABI,
    address: storageAddress,
    ...config,
  } as UseContractReadConfig<typeof storageABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link storageABI}__ and `functionName` set to `"retrieve"`.
 */
export function useStorageRetrieve<
  TSelectData = ReadContractResult<typeof storageABI, 'retrieve'>,
>(
  config: Omit<
    UseContractReadConfig<typeof storageABI, 'retrieve', TSelectData>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: storageABI,
    address: storageAddress,
    functionName: 'retrieve',
    ...config,
  } as UseContractReadConfig<typeof storageABI, 'retrieve', TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link storageABI}__.
 */
export function useStorageWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof storageABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof storageABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof storageABI, TFunctionName>({
    abi: storageABI,
    address: storageAddress,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link storageABI}__ and `functionName` set to `"store"`.
 */
export function useStorageStore<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof storageABI, 'store'>['abi'],
        'store'
      > & { functionName?: 'store' }
    : UseContractWriteConfig<TMode, typeof storageABI, 'store'> & {
        abi?: never
        functionName?: 'store'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof storageABI, 'store'>({
    abi: storageABI,
    address: storageAddress,
    functionName: 'store',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link storageABI}__.
 */
export function usePrepareStorageWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof storageABI, TFunctionName>,
    'abi' | 'address'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: storageABI,
    address: storageAddress,
    ...config,
  } as UsePrepareContractWriteConfig<typeof storageABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link storageABI}__ and `functionName` set to `"store"`.
 */
export function usePrepareStorageStore(
  config: Omit<
    UsePrepareContractWriteConfig<typeof storageABI, 'store'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: storageABI,
    address: storageAddress,
    functionName: 'store',
    ...config,
  } as UsePrepareContractWriteConfig<typeof storageABI, 'store'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link storageABI}__.
 */
export function useStorageEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof storageABI, TEventName>,
    'abi' | 'address'
  > = {} as any,
) {
  return useContractEvent({
    abi: storageABI,
    address: storageAddress,
    ...config,
  } as UseContractEventConfig<typeof storageABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link storageABI}__ and `eventName` set to `"ValueStored"`.
 */
export function useStorageValueStoredEvent(
  config: Omit<
    UseContractEventConfig<typeof storageABI, 'ValueStored'>,
    'abi' | 'address' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: storageABI,
    address: storageAddress,
    eventName: 'ValueStored',
    ...config,
  } as UseContractEventConfig<typeof storageABI, 'ValueStored'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link arkaMasterABI}__.
 */
export function useArkaMaster(
  config: Omit<UseContractConfig, 'abi' | 'address'> = {} as any,
) {
  return useContract({
    abi: arkaMasterABI,
    address: arkaMasterAddress,
    ...config,
  })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link arkaMasterABI}__.
 */
export function useArkaMasterRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof arkaMasterABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof arkaMasterABI, TFunctionName, TSelectData>,
    'abi' | 'address'
  > = {} as any,
) {
  return useContractRead({
    abi: arkaMasterABI,
    address: arkaMasterAddress,
    ...config,
  } as UseContractReadConfig<typeof arkaMasterABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link arkaMasterABI}__ and `functionName` set to `"arkaToken"`.
 */
export function useArkaMasterArkaToken<
  TSelectData = ReadContractResult<typeof arkaMasterABI, 'arkaToken'>,
>(
  config: Omit<
    UseContractReadConfig<typeof arkaMasterABI, 'arkaToken', TSelectData>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: arkaMasterABI,
    address: arkaMasterAddress,
    functionName: 'arkaToken',
    ...config,
  } as UseContractReadConfig<typeof arkaMasterABI, 'arkaToken', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link arkaMasterABI}__ and `functionName` set to `"currentStake"`.
 */
export function useArkaMasterCurrentStake<
  TSelectData = ReadContractResult<typeof arkaMasterABI, 'currentStake'>,
>(
  config: Omit<
    UseContractReadConfig<typeof arkaMasterABI, 'currentStake', TSelectData>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: arkaMasterABI,
    address: arkaMasterAddress,
    functionName: 'currentStake',
    ...config,
  } as UseContractReadConfig<typeof arkaMasterABI, 'currentStake', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link arkaMasterABI}__ and `functionName` set to `"getInteraction"`.
 */
export function useArkaMasterGetInteraction<
  TSelectData = ReadContractResult<typeof arkaMasterABI, 'getInteraction'>,
>(
  config: Omit<
    UseContractReadConfig<typeof arkaMasterABI, 'getInteraction', TSelectData>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: arkaMasterABI,
    address: arkaMasterAddress,
    functionName: 'getInteraction',
    ...config,
  } as UseContractReadConfig<
    typeof arkaMasterABI,
    'getInteraction',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link arkaMasterABI}__ and `functionName` set to `"getPriceForProposalInWei"`.
 */
export function useArkaMasterGetPriceForProposalInWei<
  TSelectData = ReadContractResult<
    typeof arkaMasterABI,
    'getPriceForProposalInWei'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof arkaMasterABI,
      'getPriceForProposalInWei',
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: arkaMasterABI,
    address: arkaMasterAddress,
    functionName: 'getPriceForProposalInWei',
    ...config,
  } as UseContractReadConfig<
    typeof arkaMasterABI,
    'getPriceForProposalInWei',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link arkaMasterABI}__ and `functionName` set to `"getResource"`.
 */
export function useArkaMasterGetResource<
  TSelectData = ReadContractResult<typeof arkaMasterABI, 'getResource'>,
>(
  config: Omit<
    UseContractReadConfig<typeof arkaMasterABI, 'getResource', TSelectData>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: arkaMasterABI,
    address: arkaMasterAddress,
    functionName: 'getResource',
    ...config,
  } as UseContractReadConfig<typeof arkaMasterABI, 'getResource', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link arkaMasterABI}__ and `functionName` set to `"getResourceLength"`.
 */
export function useArkaMasterGetResourceLength<
  TSelectData = ReadContractResult<typeof arkaMasterABI, 'getResourceLength'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof arkaMasterABI,
      'getResourceLength',
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: arkaMasterABI,
    address: arkaMasterAddress,
    functionName: 'getResourceLength',
    ...config,
  } as UseContractReadConfig<
    typeof arkaMasterABI,
    'getResourceLength',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link arkaMasterABI}__ and `functionName` set to `"interactions"`.
 */
export function useArkaMasterInteractions<
  TSelectData = ReadContractResult<typeof arkaMasterABI, 'interactions'>,
>(
  config: Omit<
    UseContractReadConfig<typeof arkaMasterABI, 'interactions', TSelectData>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: arkaMasterABI,
    address: arkaMasterAddress,
    functionName: 'interactions',
    ...config,
  } as UseContractReadConfig<typeof arkaMasterABI, 'interactions', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link arkaMasterABI}__ and `functionName` set to `"owner"`.
 */
export function useArkaMasterOwner<
  TSelectData = ReadContractResult<typeof arkaMasterABI, 'owner'>,
>(
  config: Omit<
    UseContractReadConfig<typeof arkaMasterABI, 'owner', TSelectData>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: arkaMasterABI,
    address: arkaMasterAddress,
    functionName: 'owner',
    ...config,
  } as UseContractReadConfig<typeof arkaMasterABI, 'owner', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link arkaMasterABI}__ and `functionName` set to `"priceFeedEthUsd"`.
 */
export function useArkaMasterPriceFeedEthUsd<
  TSelectData = ReadContractResult<typeof arkaMasterABI, 'priceFeedEthUsd'>,
>(
  config: Omit<
    UseContractReadConfig<typeof arkaMasterABI, 'priceFeedEthUsd', TSelectData>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: arkaMasterABI,
    address: arkaMasterAddress,
    functionName: 'priceFeedEthUsd',
    ...config,
  } as UseContractReadConfig<
    typeof arkaMasterABI,
    'priceFeedEthUsd',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link arkaMasterABI}__ and `functionName` set to `"resources"`.
 */
export function useArkaMasterResources<
  TSelectData = ReadContractResult<typeof arkaMasterABI, 'resources'>,
>(
  config: Omit<
    UseContractReadConfig<typeof arkaMasterABI, 'resources', TSelectData>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: arkaMasterABI,
    address: arkaMasterAddress,
    functionName: 'resources',
    ...config,
  } as UseContractReadConfig<typeof arkaMasterABI, 'resources', TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link arkaMasterABI}__.
 */
export function useArkaMasterWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof arkaMasterABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof arkaMasterABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof arkaMasterABI, TFunctionName>({
    abi: arkaMasterABI,
    address: arkaMasterAddress,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link arkaMasterABI}__ and `functionName` set to `"endCurrentStake"`.
 */
export function useArkaMasterEndCurrentStake<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof arkaMasterABI,
          'endCurrentStake'
        >['abi'],
        'endCurrentStake'
      > & { functionName?: 'endCurrentStake' }
    : UseContractWriteConfig<TMode, typeof arkaMasterABI, 'endCurrentStake'> & {
        abi?: never
        functionName?: 'endCurrentStake'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof arkaMasterABI, 'endCurrentStake'>({
    abi: arkaMasterABI,
    address: arkaMasterAddress,
    functionName: 'endCurrentStake',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link arkaMasterABI}__ and `functionName` set to `"interact"`.
 */
export function useArkaMasterInteract<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof arkaMasterABI, 'interact'>['abi'],
        'interact'
      > & { functionName?: 'interact' }
    : UseContractWriteConfig<TMode, typeof arkaMasterABI, 'interact'> & {
        abi?: never
        functionName?: 'interact'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof arkaMasterABI, 'interact'>({
    abi: arkaMasterABI,
    address: arkaMasterAddress,
    functionName: 'interact',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link arkaMasterABI}__ and `functionName` set to `"proposeResource"`.
 */
export function useArkaMasterProposeResource<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof arkaMasterABI,
          'proposeResource'
        >['abi'],
        'proposeResource'
      > & { functionName?: 'proposeResource' }
    : UseContractWriteConfig<TMode, typeof arkaMasterABI, 'proposeResource'> & {
        abi?: never
        functionName?: 'proposeResource'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof arkaMasterABI, 'proposeResource'>({
    abi: arkaMasterABI,
    address: arkaMasterAddress,
    functionName: 'proposeResource',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link arkaMasterABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useArkaMasterRenounceOwnership<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof arkaMasterABI,
          'renounceOwnership'
        >['abi'],
        'renounceOwnership'
      > & { functionName?: 'renounceOwnership' }
    : UseContractWriteConfig<
        TMode,
        typeof arkaMasterABI,
        'renounceOwnership'
      > & {
        abi?: never
        functionName?: 'renounceOwnership'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof arkaMasterABI, 'renounceOwnership'>({
    abi: arkaMasterABI,
    address: arkaMasterAddress,
    functionName: 'renounceOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link arkaMasterABI}__ and `functionName` set to `"startNewStake"`.
 */
export function useArkaMasterStartNewStake<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof arkaMasterABI,
          'startNewStake'
        >['abi'],
        'startNewStake'
      > & { functionName?: 'startNewStake' }
    : UseContractWriteConfig<TMode, typeof arkaMasterABI, 'startNewStake'> & {
        abi?: never
        functionName?: 'startNewStake'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof arkaMasterABI, 'startNewStake'>({
    abi: arkaMasterABI,
    address: arkaMasterAddress,
    functionName: 'startNewStake',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link arkaMasterABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useArkaMasterTransferOwnership<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof arkaMasterABI,
          'transferOwnership'
        >['abi'],
        'transferOwnership'
      > & { functionName?: 'transferOwnership' }
    : UseContractWriteConfig<
        TMode,
        typeof arkaMasterABI,
        'transferOwnership'
      > & {
        abi?: never
        functionName?: 'transferOwnership'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof arkaMasterABI, 'transferOwnership'>({
    abi: arkaMasterABI,
    address: arkaMasterAddress,
    functionName: 'transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link arkaMasterABI}__.
 */
export function usePrepareArkaMasterWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof arkaMasterABI, TFunctionName>,
    'abi' | 'address'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: arkaMasterABI,
    address: arkaMasterAddress,
    ...config,
  } as UsePrepareContractWriteConfig<typeof arkaMasterABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link arkaMasterABI}__ and `functionName` set to `"endCurrentStake"`.
 */
export function usePrepareArkaMasterEndCurrentStake(
  config: Omit<
    UsePrepareContractWriteConfig<typeof arkaMasterABI, 'endCurrentStake'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: arkaMasterABI,
    address: arkaMasterAddress,
    functionName: 'endCurrentStake',
    ...config,
  } as UsePrepareContractWriteConfig<typeof arkaMasterABI, 'endCurrentStake'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link arkaMasterABI}__ and `functionName` set to `"interact"`.
 */
export function usePrepareArkaMasterInteract(
  config: Omit<
    UsePrepareContractWriteConfig<typeof arkaMasterABI, 'interact'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: arkaMasterABI,
    address: arkaMasterAddress,
    functionName: 'interact',
    ...config,
  } as UsePrepareContractWriteConfig<typeof arkaMasterABI, 'interact'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link arkaMasterABI}__ and `functionName` set to `"proposeResource"`.
 */
export function usePrepareArkaMasterProposeResource(
  config: Omit<
    UsePrepareContractWriteConfig<typeof arkaMasterABI, 'proposeResource'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: arkaMasterABI,
    address: arkaMasterAddress,
    functionName: 'proposeResource',
    ...config,
  } as UsePrepareContractWriteConfig<typeof arkaMasterABI, 'proposeResource'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link arkaMasterABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareArkaMasterRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof arkaMasterABI, 'renounceOwnership'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: arkaMasterABI,
    address: arkaMasterAddress,
    functionName: 'renounceOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof arkaMasterABI, 'renounceOwnership'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link arkaMasterABI}__ and `functionName` set to `"startNewStake"`.
 */
export function usePrepareArkaMasterStartNewStake(
  config: Omit<
    UsePrepareContractWriteConfig<typeof arkaMasterABI, 'startNewStake'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: arkaMasterABI,
    address: arkaMasterAddress,
    functionName: 'startNewStake',
    ...config,
  } as UsePrepareContractWriteConfig<typeof arkaMasterABI, 'startNewStake'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link arkaMasterABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareArkaMasterTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof arkaMasterABI, 'transferOwnership'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: arkaMasterABI,
    address: arkaMasterAddress,
    functionName: 'transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof arkaMasterABI, 'transferOwnership'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link arkaMasterABI}__.
 */
export function useArkaMasterEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof arkaMasterABI, TEventName>,
    'abi' | 'address'
  > = {} as any,
) {
  return useContractEvent({
    abi: arkaMasterABI,
    address: arkaMasterAddress,
    ...config,
  } as UseContractEventConfig<typeof arkaMasterABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link arkaMasterABI}__ and `eventName` set to `"EndStake"`.
 */
export function useArkaMasterEndStakeEvent(
  config: Omit<
    UseContractEventConfig<typeof arkaMasterABI, 'EndStake'>,
    'abi' | 'address' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: arkaMasterABI,
    address: arkaMasterAddress,
    eventName: 'EndStake',
    ...config,
  } as UseContractEventConfig<typeof arkaMasterABI, 'EndStake'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link arkaMasterABI}__ and `eventName` set to `"Interaction"`.
 */
export function useArkaMasterInteractionEvent(
  config: Omit<
    UseContractEventConfig<typeof arkaMasterABI, 'Interaction'>,
    'abi' | 'address' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: arkaMasterABI,
    address: arkaMasterAddress,
    eventName: 'Interaction',
    ...config,
  } as UseContractEventConfig<typeof arkaMasterABI, 'Interaction'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link arkaMasterABI}__ and `eventName` set to `"NewStake"`.
 */
export function useArkaMasterNewStakeEvent(
  config: Omit<
    UseContractEventConfig<typeof arkaMasterABI, 'NewStake'>,
    'abi' | 'address' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: arkaMasterABI,
    address: arkaMasterAddress,
    eventName: 'NewStake',
    ...config,
  } as UseContractEventConfig<typeof arkaMasterABI, 'NewStake'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link arkaMasterABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useArkaMasterOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof arkaMasterABI, 'OwnershipTransferred'>,
    'abi' | 'address' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: arkaMasterABI,
    address: arkaMasterAddress,
    eventName: 'OwnershipTransferred',
    ...config,
  } as UseContractEventConfig<typeof arkaMasterABI, 'OwnershipTransferred'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link arkaMasterABI}__ and `eventName` set to `"ResourceProposed"`.
 */
export function useArkaMasterResourceProposedEvent(
  config: Omit<
    UseContractEventConfig<typeof arkaMasterABI, 'ResourceProposed'>,
    'abi' | 'address' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: arkaMasterABI,
    address: arkaMasterAddress,
    eventName: 'ResourceProposed',
    ...config,
  } as UseContractEventConfig<typeof arkaMasterABI, 'ResourceProposed'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link arkaStakingABI}__.
 */
export function useArkaStaking(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: arkaStakingABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link arkaStakingABI}__.
 */
export function useArkaStakingRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof arkaStakingABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof arkaStakingABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: arkaStakingABI,
    ...config,
  } as UseContractReadConfig<typeof arkaStakingABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link arkaStakingABI}__ and `functionName` set to `"amountReward"`.
 */
export function useArkaStakingAmountReward<
  TSelectData = ReadContractResult<typeof arkaStakingABI, 'amountReward'>,
>(
  config: Omit<
    UseContractReadConfig<typeof arkaStakingABI, 'amountReward', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: arkaStakingABI,
    functionName: 'amountReward',
    ...config,
  } as UseContractReadConfig<
    typeof arkaStakingABI,
    'amountReward',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link arkaStakingABI}__ and `functionName` set to `"arkaToken"`.
 */
export function useArkaStakingArkaToken<
  TSelectData = ReadContractResult<typeof arkaStakingABI, 'arkaToken'>,
>(
  config: Omit<
    UseContractReadConfig<typeof arkaStakingABI, 'arkaToken', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: arkaStakingABI,
    functionName: 'arkaToken',
    ...config,
  } as UseContractReadConfig<typeof arkaStakingABI, 'arkaToken', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link arkaStakingABI}__ and `functionName` set to `"calculateRewardForAccount"`.
 */
export function useArkaStakingCalculateRewardForAccount<
  TSelectData = ReadContractResult<
    typeof arkaStakingABI,
    'calculateRewardForAccount'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof arkaStakingABI,
      'calculateRewardForAccount',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: arkaStakingABI,
    functionName: 'calculateRewardForAccount',
    ...config,
  } as UseContractReadConfig<
    typeof arkaStakingABI,
    'calculateRewardForAccount',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link arkaStakingABI}__ and `functionName` set to `"duration"`.
 */
export function useArkaStakingDuration<
  TSelectData = ReadContractResult<typeof arkaStakingABI, 'duration'>,
>(
  config: Omit<
    UseContractReadConfig<typeof arkaStakingABI, 'duration', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: arkaStakingABI,
    functionName: 'duration',
    ...config,
  } as UseContractReadConfig<typeof arkaStakingABI, 'duration', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link arkaStakingABI}__ and `functionName` set to `"finishAt"`.
 */
export function useArkaStakingFinishAt<
  TSelectData = ReadContractResult<typeof arkaStakingABI, 'finishAt'>,
>(
  config: Omit<
    UseContractReadConfig<typeof arkaStakingABI, 'finishAt', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: arkaStakingABI,
    functionName: 'finishAt',
    ...config,
  } as UseContractReadConfig<typeof arkaStakingABI, 'finishAt', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link arkaStakingABI}__ and `functionName` set to `"owner"`.
 */
export function useArkaStakingOwner<
  TSelectData = ReadContractResult<typeof arkaStakingABI, 'owner'>,
>(
  config: Omit<
    UseContractReadConfig<typeof arkaStakingABI, 'owner', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: arkaStakingABI,
    functionName: 'owner',
    ...config,
  } as UseContractReadConfig<typeof arkaStakingABI, 'owner', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link arkaStakingABI}__ and `functionName` set to `"rewardPerToken"`.
 */
export function useArkaStakingRewardPerToken<
  TSelectData = ReadContractResult<typeof arkaStakingABI, 'rewardPerToken'>,
>(
  config: Omit<
    UseContractReadConfig<typeof arkaStakingABI, 'rewardPerToken', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: arkaStakingABI,
    functionName: 'rewardPerToken',
    ...config,
  } as UseContractReadConfig<
    typeof arkaStakingABI,
    'rewardPerToken',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link arkaStakingABI}__ and `functionName` set to `"rewardRate"`.
 */
export function useArkaStakingRewardRate<
  TSelectData = ReadContractResult<typeof arkaStakingABI, 'rewardRate'>,
>(
  config: Omit<
    UseContractReadConfig<typeof arkaStakingABI, 'rewardRate', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: arkaStakingABI,
    functionName: 'rewardRate',
    ...config,
  } as UseContractReadConfig<typeof arkaStakingABI, 'rewardRate', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link arkaStakingABI}__ and `functionName` set to `"rewards"`.
 */
export function useArkaStakingRewards<
  TSelectData = ReadContractResult<typeof arkaStakingABI, 'rewards'>,
>(
  config: Omit<
    UseContractReadConfig<typeof arkaStakingABI, 'rewards', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: arkaStakingABI,
    functionName: 'rewards',
    ...config,
  } as UseContractReadConfig<typeof arkaStakingABI, 'rewards', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link arkaStakingABI}__ and `functionName` set to `"stakeBalanceOf"`.
 */
export function useArkaStakingStakeBalanceOf<
  TSelectData = ReadContractResult<typeof arkaStakingABI, 'stakeBalanceOf'>,
>(
  config: Omit<
    UseContractReadConfig<typeof arkaStakingABI, 'stakeBalanceOf', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: arkaStakingABI,
    functionName: 'stakeBalanceOf',
    ...config,
  } as UseContractReadConfig<
    typeof arkaStakingABI,
    'stakeBalanceOf',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link arkaStakingABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useArkaStakingTotalSupply<
  TSelectData = ReadContractResult<typeof arkaStakingABI, 'totalSupply'>,
>(
  config: Omit<
    UseContractReadConfig<typeof arkaStakingABI, 'totalSupply', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: arkaStakingABI,
    functionName: 'totalSupply',
    ...config,
  } as UseContractReadConfig<typeof arkaStakingABI, 'totalSupply', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link arkaStakingABI}__ and `functionName` set to `"updatedAt"`.
 */
export function useArkaStakingUpdatedAt<
  TSelectData = ReadContractResult<typeof arkaStakingABI, 'updatedAt'>,
>(
  config: Omit<
    UseContractReadConfig<typeof arkaStakingABI, 'updatedAt', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: arkaStakingABI,
    functionName: 'updatedAt',
    ...config,
  } as UseContractReadConfig<typeof arkaStakingABI, 'updatedAt', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link arkaStakingABI}__ and `functionName` set to `"userRewardPerTokenPaid"`.
 */
export function useArkaStakingUserRewardPerTokenPaid<
  TSelectData = ReadContractResult<
    typeof arkaStakingABI,
    'userRewardPerTokenPaid'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof arkaStakingABI,
      'userRewardPerTokenPaid',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: arkaStakingABI,
    functionName: 'userRewardPerTokenPaid',
    ...config,
  } as UseContractReadConfig<
    typeof arkaStakingABI,
    'userRewardPerTokenPaid',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link arkaStakingABI}__.
 */
export function useArkaStakingWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof arkaStakingABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof arkaStakingABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof arkaStakingABI, TFunctionName>({
    abi: arkaStakingABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link arkaStakingABI}__ and `functionName` set to `"claimReward"`.
 */
export function useArkaStakingClaimReward<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof arkaStakingABI, 'claimReward'>['abi'],
        'claimReward'
      > & { functionName?: 'claimReward' }
    : UseContractWriteConfig<TMode, typeof arkaStakingABI, 'claimReward'> & {
        abi?: never
        functionName?: 'claimReward'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof arkaStakingABI, 'claimReward'>({
    abi: arkaStakingABI,
    functionName: 'claimReward',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link arkaStakingABI}__ and `functionName` set to `"deposit"`.
 */
export function useArkaStakingDeposit<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof arkaStakingABI, 'deposit'>['abi'],
        'deposit'
      > & { functionName?: 'deposit' }
    : UseContractWriteConfig<TMode, typeof arkaStakingABI, 'deposit'> & {
        abi?: never
        functionName?: 'deposit'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof arkaStakingABI, 'deposit'>({
    abi: arkaStakingABI,
    functionName: 'deposit',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link arkaStakingABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useArkaStakingRenounceOwnership<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof arkaStakingABI,
          'renounceOwnership'
        >['abi'],
        'renounceOwnership'
      > & { functionName?: 'renounceOwnership' }
    : UseContractWriteConfig<
        TMode,
        typeof arkaStakingABI,
        'renounceOwnership'
      > & {
        abi?: never
        functionName?: 'renounceOwnership'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof arkaStakingABI, 'renounceOwnership'>({
    abi: arkaStakingABI,
    functionName: 'renounceOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link arkaStakingABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useArkaStakingTransferOwnership<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof arkaStakingABI,
          'transferOwnership'
        >['abi'],
        'transferOwnership'
      > & { functionName?: 'transferOwnership' }
    : UseContractWriteConfig<
        TMode,
        typeof arkaStakingABI,
        'transferOwnership'
      > & {
        abi?: never
        functionName?: 'transferOwnership'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof arkaStakingABI, 'transferOwnership'>({
    abi: arkaStakingABI,
    functionName: 'transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link arkaStakingABI}__ and `functionName` set to `"transferUnclaimedReward"`.
 */
export function useArkaStakingTransferUnclaimedReward<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof arkaStakingABI,
          'transferUnclaimedReward'
        >['abi'],
        'transferUnclaimedReward'
      > & { functionName?: 'transferUnclaimedReward' }
    : UseContractWriteConfig<
        TMode,
        typeof arkaStakingABI,
        'transferUnclaimedReward'
      > & {
        abi?: never
        functionName?: 'transferUnclaimedReward'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof arkaStakingABI,
    'transferUnclaimedReward'
  >({
    abi: arkaStakingABI,
    functionName: 'transferUnclaimedReward',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link arkaStakingABI}__ and `functionName` set to `"withdraw"`.
 */
export function useArkaStakingWithdraw<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof arkaStakingABI, 'withdraw'>['abi'],
        'withdraw'
      > & { functionName?: 'withdraw' }
    : UseContractWriteConfig<TMode, typeof arkaStakingABI, 'withdraw'> & {
        abi?: never
        functionName?: 'withdraw'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof arkaStakingABI, 'withdraw'>({
    abi: arkaStakingABI,
    functionName: 'withdraw',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link arkaStakingABI}__.
 */
export function usePrepareArkaStakingWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof arkaStakingABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: arkaStakingABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof arkaStakingABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link arkaStakingABI}__ and `functionName` set to `"claimReward"`.
 */
export function usePrepareArkaStakingClaimReward(
  config: Omit<
    UsePrepareContractWriteConfig<typeof arkaStakingABI, 'claimReward'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: arkaStakingABI,
    functionName: 'claimReward',
    ...config,
  } as UsePrepareContractWriteConfig<typeof arkaStakingABI, 'claimReward'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link arkaStakingABI}__ and `functionName` set to `"deposit"`.
 */
export function usePrepareArkaStakingDeposit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof arkaStakingABI, 'deposit'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: arkaStakingABI,
    functionName: 'deposit',
    ...config,
  } as UsePrepareContractWriteConfig<typeof arkaStakingABI, 'deposit'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link arkaStakingABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareArkaStakingRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof arkaStakingABI, 'renounceOwnership'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: arkaStakingABI,
    functionName: 'renounceOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof arkaStakingABI,
    'renounceOwnership'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link arkaStakingABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareArkaStakingTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof arkaStakingABI, 'transferOwnership'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: arkaStakingABI,
    functionName: 'transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof arkaStakingABI,
    'transferOwnership'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link arkaStakingABI}__ and `functionName` set to `"transferUnclaimedReward"`.
 */
export function usePrepareArkaStakingTransferUnclaimedReward(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof arkaStakingABI,
      'transferUnclaimedReward'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: arkaStakingABI,
    functionName: 'transferUnclaimedReward',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof arkaStakingABI,
    'transferUnclaimedReward'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link arkaStakingABI}__ and `functionName` set to `"withdraw"`.
 */
export function usePrepareArkaStakingWithdraw(
  config: Omit<
    UsePrepareContractWriteConfig<typeof arkaStakingABI, 'withdraw'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: arkaStakingABI,
    functionName: 'withdraw',
    ...config,
  } as UsePrepareContractWriteConfig<typeof arkaStakingABI, 'withdraw'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link arkaStakingABI}__.
 */
export function useArkaStakingEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof arkaStakingABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: arkaStakingABI,
    ...config,
  } as UseContractEventConfig<typeof arkaStakingABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link arkaStakingABI}__ and `eventName` set to `"Deposit"`.
 */
export function useArkaStakingDepositEvent(
  config: Omit<
    UseContractEventConfig<typeof arkaStakingABI, 'Deposit'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: arkaStakingABI,
    eventName: 'Deposit',
    ...config,
  } as UseContractEventConfig<typeof arkaStakingABI, 'Deposit'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link arkaStakingABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useArkaStakingOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof arkaStakingABI, 'OwnershipTransferred'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: arkaStakingABI,
    eventName: 'OwnershipTransferred',
    ...config,
  } as UseContractEventConfig<typeof arkaStakingABI, 'OwnershipTransferred'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link arkaStakingABI}__ and `eventName` set to `"RewardClaimed"`.
 */
export function useArkaStakingRewardClaimedEvent(
  config: Omit<
    UseContractEventConfig<typeof arkaStakingABI, 'RewardClaimed'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: arkaStakingABI,
    eventName: 'RewardClaimed',
    ...config,
  } as UseContractEventConfig<typeof arkaStakingABI, 'RewardClaimed'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link arkaStakingABI}__ and `eventName` set to `"TransferUnclaimedReward"`.
 */
export function useArkaStakingTransferUnclaimedRewardEvent(
  config: Omit<
    UseContractEventConfig<typeof arkaStakingABI, 'TransferUnclaimedReward'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: arkaStakingABI,
    eventName: 'TransferUnclaimedReward',
    ...config,
  } as UseContractEventConfig<typeof arkaStakingABI, 'TransferUnclaimedReward'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link arkaStakingABI}__ and `eventName` set to `"Withdraw"`.
 */
export function useArkaStakingWithdrawEvent(
  config: Omit<
    UseContractEventConfig<typeof arkaStakingABI, 'Withdraw'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: arkaStakingABI,
    eventName: 'Withdraw',
    ...config,
  } as UseContractEventConfig<typeof arkaStakingABI, 'Withdraw'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link arkaErc20ABI}__.
 */
export function useArkaErc20(
  config: Omit<UseContractConfig, 'abi' | 'address'> = {} as any,
) {
  return useContract({
    abi: arkaErc20ABI,
    address: arkaErc20Address,
    ...config,
  })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link arkaErc20ABI}__.
 */
export function useArkaErc20Read<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof arkaErc20ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof arkaErc20ABI, TFunctionName, TSelectData>,
    'abi' | 'address'
  > = {} as any,
) {
  return useContractRead({
    abi: arkaErc20ABI,
    address: arkaErc20Address,
    ...config,
  } as UseContractReadConfig<typeof arkaErc20ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link arkaErc20ABI}__ and `functionName` set to `"allowance"`.
 */
export function useArkaErc20Allowance<
  TSelectData = ReadContractResult<typeof arkaErc20ABI, 'allowance'>,
>(
  config: Omit<
    UseContractReadConfig<typeof arkaErc20ABI, 'allowance', TSelectData>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: arkaErc20ABI,
    address: arkaErc20Address,
    functionName: 'allowance',
    ...config,
  } as UseContractReadConfig<typeof arkaErc20ABI, 'allowance', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link arkaErc20ABI}__ and `functionName` set to `"arkaMaster"`.
 */
export function useArkaErc20ArkaMaster<
  TSelectData = ReadContractResult<typeof arkaErc20ABI, 'arkaMaster'>,
>(
  config: Omit<
    UseContractReadConfig<typeof arkaErc20ABI, 'arkaMaster', TSelectData>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: arkaErc20ABI,
    address: arkaErc20Address,
    functionName: 'arkaMaster',
    ...config,
  } as UseContractReadConfig<typeof arkaErc20ABI, 'arkaMaster', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link arkaErc20ABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useArkaErc20BalanceOf<
  TSelectData = ReadContractResult<typeof arkaErc20ABI, 'balanceOf'>,
>(
  config: Omit<
    UseContractReadConfig<typeof arkaErc20ABI, 'balanceOf', TSelectData>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: arkaErc20ABI,
    address: arkaErc20Address,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<typeof arkaErc20ABI, 'balanceOf', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link arkaErc20ABI}__ and `functionName` set to `"decimals"`.
 */
export function useArkaErc20Decimals<
  TSelectData = ReadContractResult<typeof arkaErc20ABI, 'decimals'>,
>(
  config: Omit<
    UseContractReadConfig<typeof arkaErc20ABI, 'decimals', TSelectData>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: arkaErc20ABI,
    address: arkaErc20Address,
    functionName: 'decimals',
    ...config,
  } as UseContractReadConfig<typeof arkaErc20ABI, 'decimals', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link arkaErc20ABI}__ and `functionName` set to `"name"`.
 */
export function useArkaErc20Name<
  TSelectData = ReadContractResult<typeof arkaErc20ABI, 'name'>,
>(
  config: Omit<
    UseContractReadConfig<typeof arkaErc20ABI, 'name', TSelectData>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: arkaErc20ABI,
    address: arkaErc20Address,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<typeof arkaErc20ABI, 'name', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link arkaErc20ABI}__ and `functionName` set to `"owner"`.
 */
export function useArkaErc20Owner<
  TSelectData = ReadContractResult<typeof arkaErc20ABI, 'owner'>,
>(
  config: Omit<
    UseContractReadConfig<typeof arkaErc20ABI, 'owner', TSelectData>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: arkaErc20ABI,
    address: arkaErc20Address,
    functionName: 'owner',
    ...config,
  } as UseContractReadConfig<typeof arkaErc20ABI, 'owner', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link arkaErc20ABI}__ and `functionName` set to `"symbol"`.
 */
export function useArkaErc20Symbol<
  TSelectData = ReadContractResult<typeof arkaErc20ABI, 'symbol'>,
>(
  config: Omit<
    UseContractReadConfig<typeof arkaErc20ABI, 'symbol', TSelectData>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: arkaErc20ABI,
    address: arkaErc20Address,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<typeof arkaErc20ABI, 'symbol', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link arkaErc20ABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useArkaErc20TotalSupply<
  TSelectData = ReadContractResult<typeof arkaErc20ABI, 'totalSupply'>,
>(
  config: Omit<
    UseContractReadConfig<typeof arkaErc20ABI, 'totalSupply', TSelectData>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: arkaErc20ABI,
    address: arkaErc20Address,
    functionName: 'totalSupply',
    ...config,
  } as UseContractReadConfig<typeof arkaErc20ABI, 'totalSupply', TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link arkaErc20ABI}__.
 */
export function useArkaErc20Write<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof arkaErc20ABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof arkaErc20ABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof arkaErc20ABI, TFunctionName>({
    abi: arkaErc20ABI,
    address: arkaErc20Address,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link arkaErc20ABI}__ and `functionName` set to `"approve"`.
 */
export function useArkaErc20Approve<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof arkaErc20ABI, 'approve'>['abi'],
        'approve'
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<TMode, typeof arkaErc20ABI, 'approve'> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof arkaErc20ABI, 'approve'>({
    abi: arkaErc20ABI,
    address: arkaErc20Address,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link arkaErc20ABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function useArkaErc20DecreaseAllowance<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof arkaErc20ABI,
          'decreaseAllowance'
        >['abi'],
        'decreaseAllowance'
      > & { functionName?: 'decreaseAllowance' }
    : UseContractWriteConfig<
        TMode,
        typeof arkaErc20ABI,
        'decreaseAllowance'
      > & {
        abi?: never
        functionName?: 'decreaseAllowance'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof arkaErc20ABI, 'decreaseAllowance'>({
    abi: arkaErc20ABI,
    address: arkaErc20Address,
    functionName: 'decreaseAllowance',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link arkaErc20ABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function useArkaErc20IncreaseAllowance<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof arkaErc20ABI,
          'increaseAllowance'
        >['abi'],
        'increaseAllowance'
      > & { functionName?: 'increaseAllowance' }
    : UseContractWriteConfig<
        TMode,
        typeof arkaErc20ABI,
        'increaseAllowance'
      > & {
        abi?: never
        functionName?: 'increaseAllowance'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof arkaErc20ABI, 'increaseAllowance'>({
    abi: arkaErc20ABI,
    address: arkaErc20Address,
    functionName: 'increaseAllowance',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link arkaErc20ABI}__ and `functionName` set to `"mintArka"`.
 */
export function useArkaErc20MintArka<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof arkaErc20ABI, 'mintArka'>['abi'],
        'mintArka'
      > & { functionName?: 'mintArka' }
    : UseContractWriteConfig<TMode, typeof arkaErc20ABI, 'mintArka'> & {
        abi?: never
        functionName?: 'mintArka'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof arkaErc20ABI, 'mintArka'>({
    abi: arkaErc20ABI,
    address: arkaErc20Address,
    functionName: 'mintArka',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link arkaErc20ABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useArkaErc20RenounceOwnership<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof arkaErc20ABI,
          'renounceOwnership'
        >['abi'],
        'renounceOwnership'
      > & { functionName?: 'renounceOwnership' }
    : UseContractWriteConfig<
        TMode,
        typeof arkaErc20ABI,
        'renounceOwnership'
      > & {
        abi?: never
        functionName?: 'renounceOwnership'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof arkaErc20ABI, 'renounceOwnership'>({
    abi: arkaErc20ABI,
    address: arkaErc20Address,
    functionName: 'renounceOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link arkaErc20ABI}__ and `functionName` set to `"setArkaMaster"`.
 */
export function useArkaErc20SetArkaMaster<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof arkaErc20ABI, 'setArkaMaster'>['abi'],
        'setArkaMaster'
      > & { functionName?: 'setArkaMaster' }
    : UseContractWriteConfig<TMode, typeof arkaErc20ABI, 'setArkaMaster'> & {
        abi?: never
        functionName?: 'setArkaMaster'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof arkaErc20ABI, 'setArkaMaster'>({
    abi: arkaErc20ABI,
    address: arkaErc20Address,
    functionName: 'setArkaMaster',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link arkaErc20ABI}__ and `functionName` set to `"transfer"`.
 */
export function useArkaErc20Transfer<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof arkaErc20ABI, 'transfer'>['abi'],
        'transfer'
      > & { functionName?: 'transfer' }
    : UseContractWriteConfig<TMode, typeof arkaErc20ABI, 'transfer'> & {
        abi?: never
        functionName?: 'transfer'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof arkaErc20ABI, 'transfer'>({
    abi: arkaErc20ABI,
    address: arkaErc20Address,
    functionName: 'transfer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link arkaErc20ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useArkaErc20TransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof arkaErc20ABI, 'transferFrom'>['abi'],
        'transferFrom'
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<TMode, typeof arkaErc20ABI, 'transferFrom'> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof arkaErc20ABI, 'transferFrom'>({
    abi: arkaErc20ABI,
    address: arkaErc20Address,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link arkaErc20ABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useArkaErc20TransferOwnership<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof arkaErc20ABI,
          'transferOwnership'
        >['abi'],
        'transferOwnership'
      > & { functionName?: 'transferOwnership' }
    : UseContractWriteConfig<
        TMode,
        typeof arkaErc20ABI,
        'transferOwnership'
      > & {
        abi?: never
        functionName?: 'transferOwnership'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof arkaErc20ABI, 'transferOwnership'>({
    abi: arkaErc20ABI,
    address: arkaErc20Address,
    functionName: 'transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link arkaErc20ABI}__.
 */
export function usePrepareArkaErc20Write<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof arkaErc20ABI, TFunctionName>,
    'abi' | 'address'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: arkaErc20ABI,
    address: arkaErc20Address,
    ...config,
  } as UsePrepareContractWriteConfig<typeof arkaErc20ABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link arkaErc20ABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareArkaErc20Approve(
  config: Omit<
    UsePrepareContractWriteConfig<typeof arkaErc20ABI, 'approve'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: arkaErc20ABI,
    address: arkaErc20Address,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof arkaErc20ABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link arkaErc20ABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function usePrepareArkaErc20DecreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof arkaErc20ABI, 'decreaseAllowance'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: arkaErc20ABI,
    address: arkaErc20Address,
    functionName: 'decreaseAllowance',
    ...config,
  } as UsePrepareContractWriteConfig<typeof arkaErc20ABI, 'decreaseAllowance'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link arkaErc20ABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function usePrepareArkaErc20IncreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof arkaErc20ABI, 'increaseAllowance'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: arkaErc20ABI,
    address: arkaErc20Address,
    functionName: 'increaseAllowance',
    ...config,
  } as UsePrepareContractWriteConfig<typeof arkaErc20ABI, 'increaseAllowance'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link arkaErc20ABI}__ and `functionName` set to `"mintArka"`.
 */
export function usePrepareArkaErc20MintArka(
  config: Omit<
    UsePrepareContractWriteConfig<typeof arkaErc20ABI, 'mintArka'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: arkaErc20ABI,
    address: arkaErc20Address,
    functionName: 'mintArka',
    ...config,
  } as UsePrepareContractWriteConfig<typeof arkaErc20ABI, 'mintArka'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link arkaErc20ABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareArkaErc20RenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof arkaErc20ABI, 'renounceOwnership'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: arkaErc20ABI,
    address: arkaErc20Address,
    functionName: 'renounceOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof arkaErc20ABI, 'renounceOwnership'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link arkaErc20ABI}__ and `functionName` set to `"setArkaMaster"`.
 */
export function usePrepareArkaErc20SetArkaMaster(
  config: Omit<
    UsePrepareContractWriteConfig<typeof arkaErc20ABI, 'setArkaMaster'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: arkaErc20ABI,
    address: arkaErc20Address,
    functionName: 'setArkaMaster',
    ...config,
  } as UsePrepareContractWriteConfig<typeof arkaErc20ABI, 'setArkaMaster'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link arkaErc20ABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareArkaErc20Transfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof arkaErc20ABI, 'transfer'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: arkaErc20ABI,
    address: arkaErc20Address,
    functionName: 'transfer',
    ...config,
  } as UsePrepareContractWriteConfig<typeof arkaErc20ABI, 'transfer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link arkaErc20ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareArkaErc20TransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof arkaErc20ABI, 'transferFrom'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: arkaErc20ABI,
    address: arkaErc20Address,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof arkaErc20ABI, 'transferFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link arkaErc20ABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareArkaErc20TransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof arkaErc20ABI, 'transferOwnership'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: arkaErc20ABI,
    address: arkaErc20Address,
    functionName: 'transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof arkaErc20ABI, 'transferOwnership'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link arkaErc20ABI}__.
 */
export function useArkaErc20Event<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof arkaErc20ABI, TEventName>,
    'abi' | 'address'
  > = {} as any,
) {
  return useContractEvent({
    abi: arkaErc20ABI,
    address: arkaErc20Address,
    ...config,
  } as UseContractEventConfig<typeof arkaErc20ABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link arkaErc20ABI}__ and `eventName` set to `"Approval"`.
 */
export function useArkaErc20ApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof arkaErc20ABI, 'Approval'>,
    'abi' | 'address' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: arkaErc20ABI,
    address: arkaErc20Address,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof arkaErc20ABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link arkaErc20ABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useArkaErc20OwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof arkaErc20ABI, 'OwnershipTransferred'>,
    'abi' | 'address' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: arkaErc20ABI,
    address: arkaErc20Address,
    eventName: 'OwnershipTransferred',
    ...config,
  } as UseContractEventConfig<typeof arkaErc20ABI, 'OwnershipTransferred'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link arkaErc20ABI}__ and `eventName` set to `"Transfer"`.
 */
export function useArkaErc20TransferEvent(
  config: Omit<
    UseContractEventConfig<typeof arkaErc20ABI, 'Transfer'>,
    'abi' | 'address' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: arkaErc20ABI,
    address: arkaErc20Address,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof arkaErc20ABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link chainlinkEthUsdABI}__.
 */
export function useChainlinkEthUsd(
  config: Omit<UseContractConfig, 'abi' | 'address'> = {} as any,
) {
  return useContract({
    abi: chainlinkEthUsdABI,
    address: chainlinkEthUsdAddress,
    ...config,
  })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link chainlinkEthUsdABI}__.
 */
export function useChainlinkEthUsdRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof chainlinkEthUsdABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof chainlinkEthUsdABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address'
  > = {} as any,
) {
  return useContractRead({
    abi: chainlinkEthUsdABI,
    address: chainlinkEthUsdAddress,
    ...config,
  } as UseContractReadConfig<
    typeof chainlinkEthUsdABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link chainlinkEthUsdABI}__ and `functionName` set to `"getLatestPrice"`.
 */
export function useChainlinkEthUsdGetLatestPrice<
  TSelectData = ReadContractResult<typeof chainlinkEthUsdABI, 'getLatestPrice'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof chainlinkEthUsdABI,
      'getLatestPrice',
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: chainlinkEthUsdABI,
    address: chainlinkEthUsdAddress,
    functionName: 'getLatestPrice',
    ...config,
  } as UseContractReadConfig<
    typeof chainlinkEthUsdABI,
    'getLatestPrice',
    TSelectData
  >)
}
